name: 'Deploy Full Stack to VM via SSH'

on:
  push:
    branches:
      - 'main'

jobs:
  deploy:
    name: 'Deploy Full Stack to VM'
    runs-on: ubuntu-latest

    steps:
      - name: 'Deploy Code, Build Images, and Restart Docker'
        uses: appleboy/ssh-action@v1.0.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          envs: GITHUB_TOKEN
          script: |
            set -e
            echo "--- Starting full stack deployment ---"
            echo "1. Cleaning and re-cloning repository to avoid permission issues..."
            # Navigate to parent directory and remove the old repo
            cd /home/is3yak3/
            sudo rm -rf deepfake-detection-ai
            # Clone fresh copy with proper permissions
            sudo git clone https://${GITHUB_TOKEN}@github.com/${{ github.repository }}.git deepfake-detection-ai
            # Fix ownership after cloning
            sudo chown -R $(whoami):$(whoami) deepfake-detection-ai
            cd deepfake-detection-ai
            echo "1.1. Pulling Git LFS files..."
            git lfs pull
            echo "   Repository cloned and LFS files downloaded"
            echo "2. Creating production .env file..."
            echo "# Auto-generated by GitHub Actions workflow" > .env
            echo "" >> .env
            echo "# --- General & Backend Settings ---" >> .env
            echo "FLASK_ENV=production" >> .env
            echo "DF_UPLOAD_FOLDER=uploads" >> .env
            echo "DF_MODEL_PATH=deepfake_detector_model.keras" >> .env
            echo "CORS_ALLOWED_ORIGINS=${{ secrets.CORS_ALLOWED_ORIGINS }}" >> .env
            echo "" >> .env
            echo "# --- Frontend Build & Runtime Settings ---" >> .env
            echo "NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}" >> .env
            echo "NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}" >> .env
            echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}" >> .env
            echo "" >> .env
            echo "# --- Supabase Backend & JWT Settings ---" >> .env
            echo "SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}" >> .env
            echo "SUPABASE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" >> .env
            echo "SUPABASE_JWT_SECRET=${{ secrets.SUPABASE_JWT_SECRET }}" >> .env
            echo "   .env file created successfully."
            echo "3. Rebuilding and restarting Docker services..."
            docker compose up --build -d
            echo "4. Pruning unused Docker images..."
            docker image prune -f
            echo "--- Deployment successful! ---"